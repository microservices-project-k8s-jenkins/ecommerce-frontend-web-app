# Nombre del archivo: .github/workflows/ci-frontend-scan.yml

name: CI - Build and Scan Frontend Image on PR to dev

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - dev 
  workflow_dispatch:

permissions:
  contents: read
  security-events: write 

env:
  TRIVY_VERSION: "0.63.0"
  
  APP_NAME: "frontend-app" 

jobs:
  build-and-scan-frontend:
    name: Build & Scan Frontend Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- No necesitamos Java/Maven para el frontend, así que esos pasos se eliminan ---

      - name: Install Trivy
        run: |
          VERSION=${TRIVY_VERSION}
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${VERSION}
          trivy --version

      - name: Build and Scan Image
        run: |
          mkdir -p trivy-results

          CONTEXT_PATH="."
          DOCKERFILE_PATH="./Dockerfile"

          # Verificamos si el Dockerfile existe antes de continuar.
          if [ ! -f "$DOCKERFILE_PATH" ]; then
            echo "::error::Dockerfile not found at $DOCKERFILE_PATH. Cannot build image."
            exit 1
          fi

          # Creamos un tag único para la imagen basado en el número del PR.
          # Esto evita colisiones y facilita la depuración.
          PR_NUMBER="${{ github.event.pull_request.number }}"
          TAG="pr-${PR_NUMBER:-manual}" # Usa el número del PR o "manual" si se ejecuta manualmente.
          IMAGE_NAME="local-scan/${{ env.APP_NAME }}:${TAG}"
        
          echo "--------------------------------------------------"
          echo "Building image: $IMAGE_NAME"
          echo "--------------------------------------------------"
          docker build -t "$IMAGE_NAME" -f "$DOCKERFILE_PATH" "$CONTEXT_PATH"
          
          echo "--------------------------------------------------"
          echo "Scanning image with Trivy: $IMAGE_NAME"
          echo "--------------------------------------------------"
          
          # Escaneamos la imagen buscando vulnerabilidades ALTAS y CRÍTICAS.
          # --exit-code 1: Hace que el comando falle (y por tanto el step) si encuentra vulnerabilidades.
          # --ignore-unfixed: Ignora vulnerabilidades que aún no tienen un parche. Muy recomendable.
          # --format sarif: Formato necesario para la integración con la pestaña de Seguridad de GitHub.
          trivy image \
            --exit-code 1 \
            --scanners vuln \
            --severity HIGH,CRITICAL \
            --format sarif \
            --output "trivy-results/frontend.sarif" \
            --ignore-unfixed \
            "$IMAGE_NAME"
          
          echo "Scan completed successfully. No HIGH or CRITICAL issues found."

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() 
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results